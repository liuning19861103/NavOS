#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import numpy as np
def q2dcm(q):   # q2dcm函数定义
    p = np.zeros((6, 1))

    for i in range(3):
        p[i, 0] = q[i, 0] ** 2

    p[4, 0] = p[1, 0] + p[2, 0]
    if p[0, 0] + p[3, 0] + p[4, 0] != 0:
        p[5, 0] = 2 / (p[0, 0] + p[3, 0] + p[4, 0])

    else:
        p[5, 0] = 0

    R = np.zeros((3, 3))
    R[0, 0] = 1 - p[5, 0] * p[4, 0]
    R[1, 1] = 1 - p[5, 0] * (p[0, 0] + p[2, 0])
    R[2, 2] = 1 - p[5, 0] * (p[0, 0] + p[1, 0])

    p[0, 0] = p[5, 0] * q[0, 0]
    p[1, 0] = p[5, 0] * q[1, 0]
    p[4, 0] = p[5, 0] * q[2, 0] * q[3, 0]
    p[5, 0] = p[0, 0] * q[1, 0]

    R[0, 1] = p[5, 0] - p[4, 0]
    R[1, 0] = p[5, 0] + p[4, 0]

    p[4, 0] = p[1, 0] * q[3, 0]
    p[5, 0] = p[0, 0] * q[2, 0]

    R[0, 2] = p[5, 0] + p[4, 0]
    R[2, 0] = p[5, 0] - p[4, 0]

    p[4, 0] = p[0, 0] * q[3, 0]
    p[5, 0] = p[1, 0] * q[2, 0]

    R[1, 2] = p[5, 0] - p[4, 0]
    R[2, 1] = p[5, 0] + p[4, 0]

    return R